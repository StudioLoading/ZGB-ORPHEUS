#ifndef CUSTOMDATAS_FILE
#define CUSTOMDATAS_FILE


typedef enum{
	BORDER_SKY,
	BORDER_FLAMES
}CURRENT_BORDER;

typedef enum{
	GENERIC_IDLE,
	GENERIC_WALK,
	IDLE_UP,
	IDLE_DOWN,
	IDLE_LEFT,
	IDLE_RIGHT,
	WALK_LEFT,
	WALK_RIGHT,
	WALK_UP,
	WALK_DOWN,
	JUMP,
	ATTACK,
	HIT,
	DIE,
	PREATTACK_RIGHT,
	PREATTACK_UP,
	PREATTACK_LEFT,
	PREATTACK_DOWN,
	FROZEN,
	MOVE_TO_SAVED_ORPHEUS
}SPRITE_STATES;

struct OrpheusInfo{
	SPRITE_STATES ow_state;
	UINT8 tile_collision;
	INT8 vx;
	INT8 vy;
    INT8 charming;
};

struct CharonInfo{
	SPRITE_STATES e_state;
	UINT8 tile_collision;
	INT8 vx;
    INT8 wait;
	INT8 wait_max;
	INT8 countdown;
};

struct CerberusInfo{
	SPRITE_STATES e_state;
	INT8 vx;
	INT8 vy;
    UINT8 wait;
	INT8 frmskip;
	INT8 frmskip_max;
	INT8 head_config;
};

struct EnemyInfo{
	SPRITE_STATES e_state;
	UINT8 tile_collision;
	INT8 vx;
	INT8 vy;
    UINT8 wait;
	UINT8 frmskip_wait;
	UINT8 e_configured;
	UINT8 frmskip;
};

typedef enum{
	NOTE_MOV_NONE,
	NOTE_MOV_SIN,
	NOTE_MOV_H,
	NOTE_MOV_V,
	NOTE_MOV_D
}NOTE_MOVEMENT_TYPE;

struct NoteInfo{
	UINT8 is_enemy;
	INT8 vx;
	INT8 vy;
	UINT8 wait;
	INT8 frmskip;
	INT8 frmskip_max;
	NOTE_MOVEMENT_TYPE movement;
};

typedef enum{
	ATTRACT,
	SLEEP,
	REPEL
}SONG;

typedef enum{
	ITEM_NONE,
	LYRE,
	HEART,
	KEY,
	BLOCK,
	BLOCK_FIXED,
	BUTTON,
	DOOR,
	DOOR_KEY,
	DOOR_ENEMY
}ITEM_TYPE;

struct ItemInfo{
	ITEM_TYPE item_type;
	UINT8 i_configured;
	INT8 counter_x;
	INT8 counter_y;
	INT8 counter_verso;//1 o -1
};

struct ExclamationInfo{
	INT8 counter;
};

struct ItemSpawnedByCommon{
	UINT8 sprite_type;
	ITEM_TYPE item_type;
	UINT8 spawned;
};

typedef enum{
	MAP_NONE,
	TUTORIAL,
	HADES_00,
	HADES_01,
	HADES_02,
	HADES_03,
	HADES_04,
	HADES_05,
	BOSS_CHARON,
	HADES_06,
	HADES_07,
	HADES_08,
	HADES_09,
	HADES_10,
	BOSS_CERBERUS,
	HADES_11,
	HADES_12,
	HADES_13,
	HADES_14,
	HADES_15,
	BOSS_MINOS,
	HADES_16,
	HADES_17,
	HADES_18,
	HADES_19,
	HADES_20,
	BOSS_AEACUS,
	HADES_21,
	HADES_22,
	HADES_23,
	HADES_24,
	HADES_25,
	HADES_26,//RADAMANTHUS
	HADES_27,
	BOSS_HADES,
	END_GAME,
	END_DEMO
}MACROMAP;

typedef enum{
	DEATH_NONE,
	DEATH_SKULL,
	DEATH_PUFF_LEFT_0,
	DEATH_PUFF_LEFT_1,
	DEATH_PUFF_RIGHT_0,
	DEATH_PUFF_RIGHT_1,
}DEATH_COMPONENT;

typedef enum{
	PUSH_NONE, PUSH_UP, PUSH_RIGHT, PUSH_DOWN, PUSH_LEFT
}PUSHING;

typedef enum{
	ENEMY_REACT_NONE,
	ENEMY_REACT_DIE,
	ENEMY_REACT_TURN,
	ENEMY_REACT_PASSTHROUGH
}ENEMY_REACTION;

typedef enum{
    AEA_IDLE,
    AEA_SCIMITAR_HORIZONTAL,
    AEA_SCIMITAR_VERTICAL,
    AEA_SCIMITAR_CLOCK,
    AEA_SCIMITAR_COUNTERCLOCK,
    AEA_BODY_WATCH,
    AEA_BODY_FLY,
	AEA_HIT
}AEACUS_PHASE;

typedef enum{
	HADES_IDLE,
	HADES_SUMMON,
	HADES_CLAW_LEFT_CIRCLE,
	HADES_CLAW_RIGHT_CIRCLE,
	HADES_CLAW_DEATHLY_HUG,
	HADES_CLAW_DIRECT,
	HADES_CLAW_STRAIGHT,
	HADES_FIREBALL_DOUBLE,
	HADES_FIREBALL_QUADRUPLE,
	HADES_SPAWN_PINBALL,
	HADES_HEADBUTT,
	HADES_HIT
}HADES_STATE;

typedef enum{
    HADESCLAW_IDLE,
    HADESCLAW_WALK_LEFT,
    HADESCLAW_WALK_RIGHT,
	HADESCLAW_PREATTACK,
	HADESCLAW_COUNTERCLOCKWISE,
	HADESCLAW_CLOCKWISE,
    HADESCLAW_DIRECT,
    HADESCLAW_STRAIGHT,
	HADESCLAW_SUMMON,
	HADESCLAW_HIT,
	HADESCLAW_HIDDEN,
	HADESCLAW_WAIT
}HADESCLAW_STATE;

typedef enum{
	MOVEMENT_NONE,
	MOVEMENT_H_LEFT,
	MOVEMENT_H_RIGHT,
	MOVEMENT_V_UP,
	MOVEMENT_V_DOWN,
	MOVEMENT_DIAGONAL_NWSE,
	MOVEMENT_DIAGONAL_SENW,
	MOVEMENT_DIAGONAL_NESW,
	MOVEMENT_DIAGONAL_SWNE,
	MOVEMENT_CLOCKWISE,
	MOVEMENT_COUNTERCLOCKWISE
}MOVEMENT_TYPE;

#endif